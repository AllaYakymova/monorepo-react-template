name: Generate Changelog and Release

on:
  workflow_dispatch:
    inputs:
      node_version:
      publish_front:
        required: true
        default: 'false'
        type: boolean
        description: 'Release front-end'
      publish_plugin:
        required: true
        default: 'false'
        type: boolean
        description: 'Release plugin-1'
      publish_root:
        required: true
        default: 'false'
        type: boolean
        description: 'Release root'

jobs:
  generate-and-release-front-end:
   runs-on: ubuntu-latest
   permissions:
      contents: 'write'
      packages: 'write'
  
   if: ${{ inputs.publish_front == true }}
   steps:
      # 1.1 Checkout репозиторий
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Убедитесь, что весь репозиторий загружен, включая историю коммитов

      # 2.1 Установить зависимости
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

       # 3.1 Установить зависимости для работы с git
      - name: Install dependencies
        run: |
          npm install -g conventional-changelog-cli

       # 4.1 Проверить изменения в front-end
      - name: Check changes in front-end
        id: changes-front-end
        run: |
          # Обновляем локальные данные о ветке master
          git fetch origin master

          # Проверяем, существует ли ветка master на удалённом репозитории
          BASE_BRANCH="origin/master"
          if git rev-parse --verify $BASE_BRANCH >/dev/null 2>&1; then
            # Находим общий предок между текущей веткой и master
            BASE_COMMIT=$(git merge-base HEAD $BASE_BRANCH)
          else
            echo "No common ancestor found. Using initial commit as base."
            BASE_COMMIT=$(git rev-list --max-parents=0 HEAD)
          fi

          # Сравниваем изменения в front-end относительно базового коммита
          git diff --quiet $BASE_COMMIT HEAD -- packages/front-end || echo "Changes detected" >> $GITHUB_ENV

          # Если изменения есть, сохраняем флаг
          if [ $? -eq 0 ]; then
            echo "changes=true" >> $GITHUB_ENV
          else
            echo "changes=false" >> $GITHUB_ENV
          fi

       # 5.1 Сбор данных коммитов
      - name: Generate changelog for front-end
        # if: ${{ steps.setup.outputs.pr-running != 'true' && inputs.publish_components != true && inputs.publish_editor != true }}
        if: env.changes == 'true'
        run: |
          # Генерация CHANGELOG.md для front-end
          npm run changelog:front-end

      # 6.1 Создать релиз для front-end, если есть изменения
      - name: Create GitHub Release for front-end
        if: env.changes == 'true'
        uses: actions/create-release@v1
        with:
          tag_name: front-end-v${{ github.run_id }}
          release_name: front-end Release v${{ github.run_id }}
          draft: false
          prerelease: false
          body: |
            See the latest changes for front-end in [CHANGELOG.md](packages/front-end/CHANGELOG.md).


  generate-and-release-plugin-1:
    runs-on: ubuntu-latest
    permissions:
      contents: 'write'
      packages: 'write'

    if: ${{ inputs.publish_plugin == true }}
    steps:
      # 1.2 Checkout репозиторий
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Убедитесь, что весь репозиторий загружен, включая историю коммитов

      # 2.2 Установить зависимости
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 3.2 Установить зависимости для работы с git
      - name: Install dependencies
        run: |
          npm install -g conventional-changelog-cli

      # 4.2 Проверить изменения в plugin-1
      - name: Check changes in plugin-1
        id: changes-plugin-1
        run: |
          # Обновляем локальные данные о ветке master
          git fetch origin master

          # Проверяем, существует ли ветка master на удалённом репозитории
          BASE_BRANCH="origin/master"
          if git rev-parse --verify $BASE_BRANCH >/dev/null 2>&1; then
            # Находим общий предок между текущей веткой и master
            BASE_COMMIT=$(git merge-base HEAD $BASE_BRANCH)
          else
            echo "No common ancestor found. Using initial commit as base."
            BASE_COMMIT=$(git rev-list --max-parents=0 HEAD)
          fi

          # Сравниваем изменения в plugin-1 относительно базового коммита
          git diff --quiet $BASE_COMMIT HEAD -- packages/plugin-1/ || echo "Changes detected" >> $GITHUB_ENV

          # Если изменения есть, сохраняем флаг
          if [ $? -eq 0 ]; then
            echo "changes=true" >> $GITHUB_ENV
          else
            echo "changes=false" >> $GITHUB_ENV
          fi
          
      # 5.2 Сбор данных коммитов
      - name: Generate changelog for plugin-1
        if: env.changes == 'true'
        run: |
          # Генерация CHANGELOG.md для plugin-1
          npm run changelog:plugin-1

      # - name: Set up GitHub authentication
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     echo "//registry.npmjs.org/:_authToken=${GITHUB_TOKEN}" > .npmrc

      # 6.2 Создать релиз для plugin-1, если есть изменения
      - name: Create GitHub Release for plugin-1
        if: env.changes == 'true'
        uses: actions/create-release@v1
        with:
          tag_name: plugin-1-v${{ github.run_id }}
          release_name: plugin-1 Release v${{ github.run_id }}
          draft: false
          prerelease: false
          body: |
            See the latest changes for plugin-1 in [CHANGELOG.md](packages/plugin-1/CHANGELOG.md).
      
  generate-and-release-root:
    runs-on: ubuntu-latest
    permissions:
      contents: 'write'
      packages: 'write'

    if: ${{ inputs.publish_root == true }}
    steps:
      # 1.2 Checkout репозиторий
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Убедитесь, что весь репозиторий загружен, включая историю коммитов

      # 2.2 Установить зависимости
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # 3.2 Установить зависимости для работы с git
      - name: Install dependencies
        run: |
          npm install -g conventional-changelog-cli

      # 4.2 Проверить изменения в root
      - name: Check changes in root
        id: changes-root
        run: |
          # Обновляем локальные данные о ветке master
          git fetch origin master

          # Проверяем, существует ли ветка master на удалённом репозитории
          BASE_BRANCH="origin/master"
          if git rev-parse --verify $BASE_BRANCH >/dev/null 2>&1; then
            # Находим общий предок между текущей веткой и master
            BASE_COMMIT=$(git merge-base HEAD $BASE_BRANCH)
          else
            echo "No common ancestor found. Using initial commit as base."
            BASE_COMMIT=$(git rev-list --max-parents=0 HEAD)
          fi

          # Сравниваем изменения в root относительно базового коммита
          git diff --quiet $BASE_COMMIT HEAD -- . ':!packages/' || echo "Changes detected" >> $GITHUB_ENV

          # Если изменения есть, сохраняем флаг
          if [ $? -eq 0 ]; then
            echo "changes=true" >> $GITHUB_ENV
          else
            echo "changes=false" >> $GITHUB_ENV
          fi
          
      # 5.2 Сбор данных коммитов
      - name: Generate changelog for root
        if: env.changes == 'true'
        run: |
          # Генерация CHANGELOG.md для root
          npm run changelog:root

      # - name: Set up GitHub authentication
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     echo "//registry.npmjs.org/:_authToken=${GITHUB_TOKEN}" > .npmrc

      # 6.2 Создать релиз для root, если есть изменения
      - name: Create GitHub Release for root
        if: env.changes == 'true'
        uses: actions/create-release@v1
        with:
          tag_name: root-v${{ github.run_id }}
          release_name: root Release v${{ github.run_id }}
          draft: false
          prerelease: false
          body: |
            See the latest changes for root in [CHANGELOG.md](CHANGELOG.md).

  
  # create-release:
    # needs: generate-changelog
    # runs-on: ubuntu-latest

    # steps:
    #   # 1. Checkout репозиторий
    #   - name: Checkout repository
    #     uses: actions/checkout@v3

    #   # 2. Создать релиз
    #   - name: Create GitHub Release
    #     uses: actions/create-release@v1
    #     with:
    #       tag_name: ${{ github.ref }}
    #       release_name: Release ${{ github.ref }}
    #       draft: false
    #       prerelease: false
    #       body: |
    #         Changelog updates for:
    #         - [root](CHANGELOG.md)
    #         - [front-end](packages/front-end/CHANGELOG.md)
    #         - [plugin-1](packages/plugin-1/CHANGELOG.md)