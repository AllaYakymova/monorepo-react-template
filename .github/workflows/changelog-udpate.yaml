name: Generate Changelog with Lerna

on:
  push:
    branches:
      # - master

jobs:
  update-changelog:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    # 1. Checkout репозитория
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        path: 'monorepo-react-template'
    
    - name: Set working directory
      run: |
        cd monorepo-react-template
        pwd

    - name: Check working directory
      run: |
        pwd

    - name: Configure Git author
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    # 2. Установка Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    # 3. Установка зависимостей
    - name: Install dependencies
      run: |
        npm install
        npm install -g lerna
    
    - name: Get Commit Message
      id: get-commit
      run: |
        COMMIT_MESSAGE=$(git log -1 --format=%s%b)
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        echo "COMMIT_MESSAGE: ${{ env.COMMIT_MESSAGE }}"

    # 4. Генерация CHANGELOG для каждого пакета с помощью Lerna
    - name: Process Commit Message
      id: process-commit
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const commitMessage = process.env.COMMIT_MESSAGE || '';
          const lines = commitMessage.split(';\n');
          const commands = [];

          for (const line of lines) {
            const match = line.match(/\(([^)]+)\)/); // Извлечение содержимого в скобках
            if (match) {
              const package = match[1];
              switch (package) {
                case 'front-end':
                  commands.push('npm run changelog:front-end');
                  break;
                case 'plugin-component':
                  commands.push('npm run changelog:plugin-component');
                  break;
                case 'root':
                  commands.push('npm run changelog:root');
                  break;
              }
            }
          }
          if (commands.length === 0) {
            console.log('No matching packages found in commit message.');
          }
          console.log("CCCCCCCCommands: ", commands)
          // Установить output с массивом команд как строку, разделенную ";"
          core.setOutput('commands', commands.join(' && '));
    
    - name: Add changelog details
      if: steps.process-commit.outputs.commands != ''
      run: |
        # npx lerna version --conventional-commits --yes --no-push
        commands="${{ steps.process-commit.outputs.commands }}"
        eval "$commands"
        git add .

    - name: Set up GitHub authentication
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "//registry.npmjs.org/:_authToken=${GITHUB_TOKEN}" > .npmrc

    # 6. Коммит и пуш изменений
    - name: Commit and Push Changelog Updates
      run: |
        if git diff --cached --quiet; then
          echo "No changes detected, skipping commit."
        else
          git commit -m "chore: update CHANGELOGs [skip ci]"
          git push
        fi
