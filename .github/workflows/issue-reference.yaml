name: Create Issue Reference in PR Template

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  update-template:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # - name: Install dependencies
    #   run: |
    #     npm install @octokit/rest

    - name: Extract branch name
      run: |
        BRANCH_NAME="${GITHUB_HEAD_REF}"
        ISSUE_NUMBER=$(echo "$BRANCH_NAME" | sed 's/issue-\([0-9]*\).*/\1/')
        echo "BRANCH_NAME: $BRANCH_NAME"
        echo "ISSUE_NUMBER: $ISSUE_NUMBER"
        echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV


    - name: Update pull request template
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        debug: true
        script: |
          // const fetch = require('node-fetch');

          // Достаем номер issue и pull request из контекста
          const issueNumber = process.env.ISSUE_NUMBER;
          const prNumber = context.payload.pull_request.number;
          const issueLink = `https://github.com/issues/${issueNumber}`;
          // const issueLink = `https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${issueNumber}`;
          const token = process.env.GITHUB_TOKEN;

          // Получаем существующее описание PR
          const prUrl = `https://api.github.com/repos/${context.repo.owner}/${context.repo.repo}/pulls/${prNumber}`;
          const prResponse = await fetch(prUrl, {
            headers: {
              Authorization: `Bearer ${token}`,
              Accept: 'application/vnd.github.v3+json',
            },
          });

          if (!prResponse.ok) {
            throw new Error(`Failed to fetch PR: ${prResponse.statusText}`);
          }

          const pullRequest = await prResponse.json();

          // Обновляем тело PR
          const updatedBody = pullRequest.body.replace(
            '<!-- ISSUE_LINK -->',
            `[Issue #${issueNumber}](${issueLink})`
          );

          // Отправляем обновленное описание PR
          const updatePrResponse = await fetch(prUrl, {
            method: 'PATCH',
            headers: {
              Authorization: `Bearer ${token}`,
              Accept: 'application/vnd.github.v3+json',
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ body: updatedBody }),
          });

          if (!updatePrResponse.ok) {
            throw new Error(`Failed to update PR: ${updatePrResponse.statusText}`);
          }

          console.log(`PR #${prNumber} updated successfully.`);
          
     
    - name: Logs
      run: |
        "echo ${{ env.PR_NUMBER }} ${{ env.PR_DATA }}"