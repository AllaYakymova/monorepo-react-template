name: Create Issue Reference in PR Template

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  update-template:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Extract issue number from branch name
      run: |
        BRANCH_NAME="${GITHUB_HEAD_REF}"
        if [[ "$BRANCH_NAME" =~ issue-([0-9]+)/.*$ ]]; then
          ISSUE_NUMBER="${BASH_REMATCH[1]}"
        else
          ISSUE_NUMBER=""
        fi
        echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV

    - name: Update pull request template
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        PR_URL: ${{ github.event.pull_request.html_url }}
        GITHUB_HEAD_REF: ${{ github.head_ref }}
      uses: actions/github-script@v6
      with:
        github-token: ${{ env.GITHUB_TOKEN }}
        script: |
          # Получаем переменные из окружения
          ISSUE_NUMBER="${ISSUE_NUMBER}"
          PR_NUMBER="${PR_NUMBER}"
          REPO_OWNER="${GITHUB_REPOSITORY_OWNER}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          GITHUB_TOKEN="${GITHUB_TOKEN}"
          PR_URL="${PR_URL}"

          ISSUE_LINK="https://github.com/${REPO_OWNER}/${REPO_NAME}/issues/${ISSUE_NUMBER}"
          # PR_URL="https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/pulls/${PR_NUMBER}"

          # Логируем переменные
          echo "Fetching PR #${PR_NUMBER} from ${REPO_OWNER}/${REPO_NAME}"

          # Получаем текущее тело PR
          PR_BODY=$(curl -s -H "Authorization: Bearer ${GITHUB_TOKEN}" \
                          -H "Accept: application/vnd.github.v3+json" \
                          "${PR_URL}" | jq -r '.body')

          if [ -z "$PR_BODY" ] || [ "$PR_BODY" == "null" ]; then
            echo "Error: Unable to fetch PR body or PR not found."
            exit 1
          fi

          # Обновляем тело PR, заменяя <!-- ISSUE_LINK --> на ссылку на issue
          UPDATED_BODY=$(echo "$PR_BODY" | jq -R --arg issueLink "${ISSUE_NUMBER:+[#${ISSUE_NUMBER}](${ISSUE_LINK})}" \
            'gsub("<!-- ISSUE_LINK -->"; $issueLink)')

          # Обновляем PR через API
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X PATCH "${PR_URL}" \
              -H "Authorization: Bearer ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/json" \
              --data "$(jq -n --arg body "$UPDATED_BODY" '{body: $body}')")

          if [ "$RESPONSE" -ne 200 ]; then
            echo "Error: Failed to update PR. HTTP Status: $RESPONSE"
            exit 1
          fi

          echo "PR #${PR_NUMBER} updated successfully with issue link: ${ISSUE_LINK}"
          
          //////
          # // get issue number, link and PR number from context
          # const issueNumber = process.env.ISSUE_NUMBER;
          # const prNumber = context.payload.pull_request.number;
          # const issueLink = `https://github.com/${context.repo.owner}/${context.repo.repo}/issues/${issueNumber}`;
          # const token = process.env.GITHUB_TOKEN;

          # console.log('PR Context: ', context)

          # // get PR body
          # const prUrl = `https://api.github.com/repos/${context.repo.owner}/${context.repo.repo}/pulls/${prNumber}`;
          # const prResponse = await fetch(prUrl, {
          #   headers: {
          #     Authorization: `Bearer ${token}`,
          #     Accept: 'application/vnd.github.v3+json',
          #   },
          # });

          # if (!prResponse.ok) {
          #   throw new Error(`Failed to fetch PR: ${prResponse.statusText}`);
          # }

          # const pullRequest = await prResponse.json();

          # // Uodate PR body
          # const updatedBody = pullRequest.body.replace(
          #   '<!-- ISSUE_LINK -->',
          #   issueNumber ? `[#${issueNumber}](${issueLink})` : ''
          # );

          # // Отправляем обновленное описание PR
          # const updatePrResponse = await fetch(prUrl, {
          #   method: 'PATCH',
          #   headers: {
          #     Authorization: `Bearer ${token}`,
          #     Accept: 'application/vnd.github.v3+json',
          #     'Content-Type': 'application/json',
          #   },
          #   body: JSON.stringify({ body: updatedBody }),
          # });

          # if (!updatePrResponse.ok) {
          #   throw new Error(`Failed to update PR: ${updatePrResponse.statusText}`);
          # }
          # console.log(`PR #${prNumber} updated with a linked issue ${issueLink} successfully.`);
        